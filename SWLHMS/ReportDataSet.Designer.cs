//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.3603
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Mong {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ReportDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ReportDataSet : global::System.Data.DataSet {
        
        private FinishedWorksheetReportSourceDataTable tableFinishedWorksheetReportSource;
        
        private UnfinishedWorksheetReportSourceDataTable tableUnfinishedWorksheetReportSource;
        
        private UnitPriceReportDataTable tableUnitPriceReport;
        
        private LineLaborHourReportSourceDataTable tableLineLaborHourReportSource;
        
        private InspectListReportDataTable tableInspectListReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReportDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ReportDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FinishedWorksheetReportSource"] != null)) {
                    base.Tables.Add(new FinishedWorksheetReportSourceDataTable(ds.Tables["FinishedWorksheetReportSource"]));
                }
                if ((ds.Tables["UnfinishedWorksheetReportSource"] != null)) {
                    base.Tables.Add(new UnfinishedWorksheetReportSourceDataTable(ds.Tables["UnfinishedWorksheetReportSource"]));
                }
                if ((ds.Tables["UnitPriceReport"] != null)) {
                    base.Tables.Add(new UnitPriceReportDataTable(ds.Tables["UnitPriceReport"]));
                }
                if ((ds.Tables["LineLaborHourReportSource"] != null)) {
                    base.Tables.Add(new LineLaborHourReportSourceDataTable(ds.Tables["LineLaborHourReportSource"]));
                }
                if ((ds.Tables["InspectListReport"] != null)) {
                    base.Tables.Add(new InspectListReportDataTable(ds.Tables["InspectListReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FinishedWorksheetReportSourceDataTable FinishedWorksheetReportSource {
            get {
                return this.tableFinishedWorksheetReportSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnfinishedWorksheetReportSourceDataTable UnfinishedWorksheetReportSource {
            get {
                return this.tableUnfinishedWorksheetReportSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitPriceReportDataTable UnitPriceReport {
            get {
                return this.tableUnitPriceReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LineLaborHourReportSourceDataTable LineLaborHourReportSource {
            get {
                return this.tableLineLaborHourReportSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectListReportDataTable InspectListReport {
            get {
                return this.tableInspectListReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ReportDataSet cln = ((ReportDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FinishedWorksheetReportSource"] != null)) {
                    base.Tables.Add(new FinishedWorksheetReportSourceDataTable(ds.Tables["FinishedWorksheetReportSource"]));
                }
                if ((ds.Tables["UnfinishedWorksheetReportSource"] != null)) {
                    base.Tables.Add(new UnfinishedWorksheetReportSourceDataTable(ds.Tables["UnfinishedWorksheetReportSource"]));
                }
                if ((ds.Tables["UnitPriceReport"] != null)) {
                    base.Tables.Add(new UnitPriceReportDataTable(ds.Tables["UnitPriceReport"]));
                }
                if ((ds.Tables["LineLaborHourReportSource"] != null)) {
                    base.Tables.Add(new LineLaborHourReportSourceDataTable(ds.Tables["LineLaborHourReportSource"]));
                }
                if ((ds.Tables["InspectListReport"] != null)) {
                    base.Tables.Add(new InspectListReportDataTable(ds.Tables["InspectListReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFinishedWorksheetReportSource = ((FinishedWorksheetReportSourceDataTable)(base.Tables["FinishedWorksheetReportSource"]));
            if ((initTable == true)) {
                if ((this.tableFinishedWorksheetReportSource != null)) {
                    this.tableFinishedWorksheetReportSource.InitVars();
                }
            }
            this.tableUnfinishedWorksheetReportSource = ((UnfinishedWorksheetReportSourceDataTable)(base.Tables["UnfinishedWorksheetReportSource"]));
            if ((initTable == true)) {
                if ((this.tableUnfinishedWorksheetReportSource != null)) {
                    this.tableUnfinishedWorksheetReportSource.InitVars();
                }
            }
            this.tableUnitPriceReport = ((UnitPriceReportDataTable)(base.Tables["UnitPriceReport"]));
            if ((initTable == true)) {
                if ((this.tableUnitPriceReport != null)) {
                    this.tableUnitPriceReport.InitVars();
                }
            }
            this.tableLineLaborHourReportSource = ((LineLaborHourReportSourceDataTable)(base.Tables["LineLaborHourReportSource"]));
            if ((initTable == true)) {
                if ((this.tableLineLaborHourReportSource != null)) {
                    this.tableLineLaborHourReportSource.InitVars();
                }
            }
            this.tableInspectListReport = ((InspectListReportDataTable)(base.Tables["InspectListReport"]));
            if ((initTable == true)) {
                if ((this.tableInspectListReport != null)) {
                    this.tableInspectListReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ReportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ReportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFinishedWorksheetReportSource = new FinishedWorksheetReportSourceDataTable(false);
            base.Tables.Add(this.tableFinishedWorksheetReportSource);
            this.tableUnfinishedWorksheetReportSource = new UnfinishedWorksheetReportSourceDataTable(false);
            base.Tables.Add(this.tableUnfinishedWorksheetReportSource);
            this.tableUnitPriceReport = new UnitPriceReportDataTable(false);
            base.Tables.Add(this.tableUnitPriceReport);
            this.tableLineLaborHourReportSource = new LineLaborHourReportSourceDataTable();
            base.Tables.Add(this.tableLineLaborHourReportSource);
            this.tableInspectListReport = new InspectListReportDataTable();
            base.Tables.Add(this.tableInspectListReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFinishedWorksheetReportSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnfinishedWorksheetReportSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitPriceReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLineLaborHourReportSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectListReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ReportDataSet ds = new ReportDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.FinishedWorksheetReportSource.實際總工時Column.Expression = "內部工時+外包工時";
            this.FinishedWorksheetReportSource.實際總工資Column.Expression = "內部工資+外包工資";
            this.FinishedWorksheetReportSource.標準總工時Column.Expression = "標準工時 * 數量";
            this.FinishedWorksheetReportSource.標準總工資Column.Expression = "標準總工時 * 單位人工成本";
            this.FinishedWorksheetReportSource.生產效率Column.Expression = "IIF(內部工時 IS NULL OR (內部工時+外包工時) = 0,0,標準總工時/(內部工時+外包工時))";
            this.FinishedWorksheetReportSource.實際工時Column.Expression = "IIF(數量 is NULL or 數量 = 0,0,(內部工時 + 外包工時) / 數量)";
            this.FinishedWorksheetReportSource.實際工資Column.Expression = "IIF(數量 is NULL or 數量 = 0,0,(內部工資 + 外包工資) / 數量)";
            this.FinishedWorksheetReportSource.單位標準工資Column.Expression = "標準工時 * 單位人工成本";
            this.UnfinishedWorksheetReportSource._完成_Column.Expression = "IIF(數量 = 0,0,已生產數量/數量)";
            this.UnfinishedWorksheetReportSource.生產效率Column.Expression = "IIF((內部工時+外包工時) = 0 ,0,(總標準工時*[完成%])/(內部工時+外包工時))";
            this.UnitPriceReport._實際單位工資_NT__Kpcs_Column.Expression = "IIF(數量 IS NULL OR 數量 = 0,0,([實際工資(內+外)])/數量)";
        }
        
        public delegate void FinishedWorksheetReportSourceRowChangeEventHandler(object sender, FinishedWorksheetReportSourceRowChangeEvent e);
        
        public delegate void UnfinishedWorksheetReportSourceRowChangeEventHandler(object sender, UnfinishedWorksheetReportSourceRowChangeEvent e);
        
        public delegate void UnitPriceReportRowChangeEventHandler(object sender, UnitPriceReportRowChangeEvent e);
        
        public delegate void LineLaborHourReportSourceRowChangeEventHandler(object sender, LineLaborHourReportSourceRowChangeEvent e);
        
        public delegate void InspectListReportRowChangeEventHandler(object sender, InspectListReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FinishedWorksheetReportSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column產線;
            
            private global::System.Data.DataColumn column實際完成日;
            
            private global::System.Data.DataColumn column工作單號;
            
            private global::System.Data.DataColumn column序號;
            
            private global::System.Data.DataColumn column品號;
            
            private global::System.Data.DataColumn column品名;
            
            private global::System.Data.DataColumn column數量;
            
            private global::System.Data.DataColumn column單位;
            
            private global::System.Data.DataColumn column內部工時;
            
            private global::System.Data.DataColumn column內部工資;
            
            private global::System.Data.DataColumn column外包工資;
            
            private global::System.Data.DataColumn column外包工時;
            
            private global::System.Data.DataColumn column實際總工時;
            
            private global::System.Data.DataColumn column實際總工資;
            
            private global::System.Data.DataColumn column標準總工時;
            
            private global::System.Data.DataColumn column標準總工資;
            
            private global::System.Data.DataColumn column生產效率;
            
            private global::System.Data.DataColumn column標準工時;
            
            private global::System.Data.DataColumn column單位人工成本;
            
            private global::System.Data.DataColumn column實際工時;
            
            private global::System.Data.DataColumn column實際工資;
            
            private global::System.Data.DataColumn column年份;
            
            private global::System.Data.DataColumn column月份;
            
            private global::System.Data.DataColumn column日期;
            
            private global::System.Data.DataColumn column單位標準工資;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceDataTable(bool initExpressions) {
                this.TableName = "FinishedWorksheetReportSource";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinishedWorksheetReportSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FinishedWorksheetReportSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 產線Column {
                get {
                    return this.column產線;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 實際完成日Column {
                get {
                    return this.column實際完成日;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 工作單號Column {
                get {
                    return this.column工作單號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序號Column {
                get {
                    return this.column序號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品號Column {
                get {
                    return this.column品號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品名Column {
                get {
                    return this.column品名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 數量Column {
                get {
                    return this.column數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位Column {
                get {
                    return this.column單位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 內部工時Column {
                get {
                    return this.column內部工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 內部工資Column {
                get {
                    return this.column內部工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 外包工資Column {
                get {
                    return this.column外包工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 外包工時Column {
                get {
                    return this.column外包工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 實際總工時Column {
                get {
                    return this.column實際總工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 實際總工資Column {
                get {
                    return this.column實際總工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準總工時Column {
                get {
                    return this.column標準總工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準總工資Column {
                get {
                    return this.column標準總工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生產效率Column {
                get {
                    return this.column生產效率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準工時Column {
                get {
                    return this.column標準工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位人工成本Column {
                get {
                    return this.column單位人工成本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 實際工時Column {
                get {
                    return this.column實際工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 實際工資Column {
                get {
                    return this.column實際工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年份Column {
                get {
                    return this.column年份;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 月份Column {
                get {
                    return this.column月份;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位標準工資Column {
                get {
                    return this.column單位標準工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRow this[int index] {
                get {
                    return ((FinishedWorksheetReportSourceRow)(this.Rows[index]));
                }
            }
            
            public event FinishedWorksheetReportSourceRowChangeEventHandler FinishedWorksheetReportSourceRowChanging;
            
            public event FinishedWorksheetReportSourceRowChangeEventHandler FinishedWorksheetReportSourceRowChanged;
            
            public event FinishedWorksheetReportSourceRowChangeEventHandler FinishedWorksheetReportSourceRowDeleting;
            
            public event FinishedWorksheetReportSourceRowChangeEventHandler FinishedWorksheetReportSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFinishedWorksheetReportSourceRow(FinishedWorksheetReportSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRow AddFinishedWorksheetReportSourceRow(
                        string 產線, 
                        System.DateTime 實際完成日, 
                        string 工作單號, 
                        int 序號, 
                        string 品號, 
                        string 品名, 
                        decimal 數量, 
                        string 單位, 
                        decimal 內部工時, 
                        decimal 內部工資, 
                        decimal 外包工資, 
                        decimal 外包工時, 
                        decimal 實際總工時, 
                        decimal 實際總工資, 
                        decimal 標準總工時, 
                        decimal 標準總工資, 
                        double 生產效率, 
                        decimal 標準工時, 
                        decimal 單位人工成本, 
                        decimal 實際工時, 
                        decimal 實際工資, 
                        short 年份, 
                        short 月份, 
                        System.DateTime 日期, 
                        decimal 單位標準工資) {
                FinishedWorksheetReportSourceRow rowFinishedWorksheetReportSourceRow = ((FinishedWorksheetReportSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        產線,
                        實際完成日,
                        工作單號,
                        序號,
                        品號,
                        品名,
                        數量,
                        單位,
                        內部工時,
                        內部工資,
                        外包工資,
                        外包工時,
                        實際總工時,
                        實際總工資,
                        標準總工時,
                        標準總工資,
                        生產效率,
                        標準工時,
                        單位人工成本,
                        實際工時,
                        實際工資,
                        年份,
                        月份,
                        日期,
                        單位標準工資};
                rowFinishedWorksheetReportSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFinishedWorksheetReportSourceRow);
                return rowFinishedWorksheetReportSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRow AddFinishedWorksheetReportSourceRow(
                        string 產線, 
                        System.DateTime 實際完成日, 
                        string 工作單號, 
                        int 序號, 
                        string 品號, 
                        string 品名, 
                        decimal 數量, 
                        string 單位, 
                        decimal 內部工時, 
                        decimal 內部工資, 
                        decimal 外包工資, 
                        decimal 外包工時, 
                        decimal 標準工時, 
                        decimal 單位人工成本, 
                        short 年份, 
                        short 月份, 
                        System.DateTime 日期) {
                FinishedWorksheetReportSourceRow rowFinishedWorksheetReportSourceRow = ((FinishedWorksheetReportSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        產線,
                        實際完成日,
                        工作單號,
                        序號,
                        品號,
                        品名,
                        數量,
                        單位,
                        內部工時,
                        內部工資,
                        外包工資,
                        外包工時,
                        null,
                        null,
                        null,
                        null,
                        null,
                        標準工時,
                        單位人工成本,
                        null,
                        null,
                        年份,
                        月份,
                        日期,
                        null};
                rowFinishedWorksheetReportSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFinishedWorksheetReportSourceRow);
                return rowFinishedWorksheetReportSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FinishedWorksheetReportSourceDataTable cln = ((FinishedWorksheetReportSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FinishedWorksheetReportSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column產線 = base.Columns["產線"];
                this.column實際完成日 = base.Columns["實際完成日"];
                this.column工作單號 = base.Columns["工作單號"];
                this.column序號 = base.Columns["序號"];
                this.column品號 = base.Columns["品號"];
                this.column品名 = base.Columns["品名"];
                this.column數量 = base.Columns["數量"];
                this.column單位 = base.Columns["單位"];
                this.column內部工時 = base.Columns["內部工時"];
                this.column內部工資 = base.Columns["內部工資"];
                this.column外包工資 = base.Columns["外包工資"];
                this.column外包工時 = base.Columns["外包工時"];
                this.column實際總工時 = base.Columns["實際總工時"];
                this.column實際總工資 = base.Columns["實際總工資"];
                this.column標準總工時 = base.Columns["標準總工時"];
                this.column標準總工資 = base.Columns["標準總工資"];
                this.column生產效率 = base.Columns["生產效率"];
                this.column標準工時 = base.Columns["標準工時"];
                this.column單位人工成本 = base.Columns["單位人工成本"];
                this.column實際工時 = base.Columns["實際工時"];
                this.column實際工資 = base.Columns["實際工資"];
                this.column年份 = base.Columns["年份"];
                this.column月份 = base.Columns["月份"];
                this.column日期 = base.Columns["日期"];
                this.column單位標準工資 = base.Columns["單位標準工資"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column產線 = new global::System.Data.DataColumn("產線", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column產線);
                this.column實際完成日 = new global::System.Data.DataColumn("實際完成日", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column實際完成日);
                this.column工作單號 = new global::System.Data.DataColumn("工作單號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column工作單號);
                this.column序號 = new global::System.Data.DataColumn("序號", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序號);
                this.column品號 = new global::System.Data.DataColumn("品號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品號);
                this.column品名 = new global::System.Data.DataColumn("品名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品名);
                this.column數量 = new global::System.Data.DataColumn("數量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column數量);
                this.column單位 = new global::System.Data.DataColumn("單位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位);
                this.column內部工時 = new global::System.Data.DataColumn("內部工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column內部工時);
                this.column內部工資 = new global::System.Data.DataColumn("內部工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column內部工資);
                this.column外包工資 = new global::System.Data.DataColumn("外包工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column外包工資);
                this.column外包工時 = new global::System.Data.DataColumn("外包工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column外包工時);
                this.column實際總工時 = new global::System.Data.DataColumn("實際總工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column實際總工時);
                this.column實際總工資 = new global::System.Data.DataColumn("實際總工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column實際總工資);
                this.column標準總工時 = new global::System.Data.DataColumn("標準總工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準總工時);
                this.column標準總工資 = new global::System.Data.DataColumn("標準總工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準總工資);
                this.column生產效率 = new global::System.Data.DataColumn("生產效率", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生產效率);
                this.column標準工時 = new global::System.Data.DataColumn("標準工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準工時);
                this.column單位人工成本 = new global::System.Data.DataColumn("單位人工成本", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位人工成本);
                this.column實際工時 = new global::System.Data.DataColumn("實際工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column實際工時);
                this.column實際工資 = new global::System.Data.DataColumn("實際工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column實際工資);
                this.column年份 = new global::System.Data.DataColumn("年份", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年份);
                this.column月份 = new global::System.Data.DataColumn("月份", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column月份);
                this.column日期 = new global::System.Data.DataColumn("日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期);
                this.column單位標準工資 = new global::System.Data.DataColumn("單位標準工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位標準工資);
                this.column產線.MaxLength = 255;
                this.column工作單號.MaxLength = 255;
                this.column品號.MaxLength = 255;
                this.column品名.MaxLength = 255;
                this.column單位.ReadOnly = true;
                this.column單位.DefaultValue = ((string)("KPCS"));
                this.column單位.MaxLength = 255;
                this.column外包工資.DefaultValue = ((decimal)(0m));
                this.column外包工時.DefaultValue = ((decimal)(0m));
                this.column實際總工時.ReadOnly = true;
                this.column實際總工資.ReadOnly = true;
                this.column標準總工時.ReadOnly = true;
                this.column標準總工資.ReadOnly = true;
                this.column生產效率.ReadOnly = true;
                this.column實際工時.ReadOnly = true;
                this.column實際工資.ReadOnly = true;
                this.column單位標準工資.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRow NewFinishedWorksheetReportSourceRow() {
                return ((FinishedWorksheetReportSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FinishedWorksheetReportSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FinishedWorksheetReportSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.實際總工時Column.Expression = "內部工時+外包工時";
                this.實際總工資Column.Expression = "內部工資+外包工資";
                this.標準總工時Column.Expression = "標準工時 * 數量";
                this.標準總工資Column.Expression = "標準總工時 * 單位人工成本";
                this.生產效率Column.Expression = "IIF(內部工時 IS NULL OR (內部工時+外包工時) = 0,0,標準總工時/(內部工時+外包工時))";
                this.實際工時Column.Expression = "IIF(數量 is NULL or 數量 = 0,0,(內部工時 + 外包工時) / 數量)";
                this.實際工資Column.Expression = "IIF(數量 is NULL or 數量 = 0,0,(內部工資 + 外包工資) / 數量)";
                this.單位標準工資Column.Expression = "標準工時 * 單位人工成本";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FinishedWorksheetReportSourceRowChanged != null)) {
                    this.FinishedWorksheetReportSourceRowChanged(this, new FinishedWorksheetReportSourceRowChangeEvent(((FinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FinishedWorksheetReportSourceRowChanging != null)) {
                    this.FinishedWorksheetReportSourceRowChanging(this, new FinishedWorksheetReportSourceRowChangeEvent(((FinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FinishedWorksheetReportSourceRowDeleted != null)) {
                    this.FinishedWorksheetReportSourceRowDeleted(this, new FinishedWorksheetReportSourceRowChangeEvent(((FinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FinishedWorksheetReportSourceRowDeleting != null)) {
                    this.FinishedWorksheetReportSourceRowDeleting(this, new FinishedWorksheetReportSourceRowChangeEvent(((FinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFinishedWorksheetReportSourceRow(FinishedWorksheetReportSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportDataSet ds = new ReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FinishedWorksheetReportSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnfinishedWorksheetReportSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column產線;
            
            private global::System.Data.DataColumn column單據日期;
            
            private global::System.Data.DataColumn column預計完成日;
            
            private global::System.Data.DataColumn column工作單號;
            
            private global::System.Data.DataColumn column序號;
            
            private global::System.Data.DataColumn column品號;
            
            private global::System.Data.DataColumn column品名;
            
            private global::System.Data.DataColumn column數量;
            
            private global::System.Data.DataColumn column單位;
            
            private global::System.Data.DataColumn column標準工時;
            
            private global::System.Data.DataColumn column單位人工成本;
            
            private global::System.Data.DataColumn column總標準工時;
            
            private global::System.Data.DataColumn column內部工時;
            
            private global::System.Data.DataColumn column內部工資;
            
            private global::System.Data.DataColumn column外包工資;
            
            private global::System.Data.DataColumn column外包工時;
            
            private global::System.Data.DataColumn column已生產數量;
            
            private global::System.Data.DataColumn _column完成_;
            
            private global::System.Data.DataColumn column生產效率;
            
            private global::System.Data.DataColumn column尚需工時;
            
            private global::System.Data.DataColumn column年份;
            
            private global::System.Data.DataColumn column月份;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceDataTable(bool initExpressions) {
                this.TableName = "UnfinishedWorksheetReportSource";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnfinishedWorksheetReportSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnfinishedWorksheetReportSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 產線Column {
                get {
                    return this.column產線;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單據日期Column {
                get {
                    return this.column單據日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 預計完成日Column {
                get {
                    return this.column預計完成日;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 工作單號Column {
                get {
                    return this.column工作單號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序號Column {
                get {
                    return this.column序號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品號Column {
                get {
                    return this.column品號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品名Column {
                get {
                    return this.column品名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 數量Column {
                get {
                    return this.column數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位Column {
                get {
                    return this.column單位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準工時Column {
                get {
                    return this.column標準工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位人工成本Column {
                get {
                    return this.column單位人工成本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 總標準工時Column {
                get {
                    return this.column總標準工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 內部工時Column {
                get {
                    return this.column內部工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 內部工資Column {
                get {
                    return this.column內部工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 外包工資Column {
                get {
                    return this.column外包工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 外包工時Column {
                get {
                    return this.column外包工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 已生產數量Column {
                get {
                    return this.column已生產數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _完成_Column {
                get {
                    return this._column完成_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生產效率Column {
                get {
                    return this.column生產效率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 尚需工時Column {
                get {
                    return this.column尚需工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年份Column {
                get {
                    return this.column年份;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 月份Column {
                get {
                    return this.column月份;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRow this[int index] {
                get {
                    return ((UnfinishedWorksheetReportSourceRow)(this.Rows[index]));
                }
            }
            
            public event UnfinishedWorksheetReportSourceRowChangeEventHandler UnfinishedWorksheetReportSourceRowChanging;
            
            public event UnfinishedWorksheetReportSourceRowChangeEventHandler UnfinishedWorksheetReportSourceRowChanged;
            
            public event UnfinishedWorksheetReportSourceRowChangeEventHandler UnfinishedWorksheetReportSourceRowDeleting;
            
            public event UnfinishedWorksheetReportSourceRowChangeEventHandler UnfinishedWorksheetReportSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnfinishedWorksheetReportSourceRow(UnfinishedWorksheetReportSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRow AddUnfinishedWorksheetReportSourceRow(
                        string 產線, 
                        System.DateTime 單據日期, 
                        System.DateTime 預計完成日, 
                        string 工作單號, 
                        int 序號, 
                        string 品號, 
                        string 品名, 
                        decimal 數量, 
                        string 單位, 
                        decimal 標準工時, 
                        decimal 單位人工成本, 
                        decimal 總標準工時, 
                        decimal 內部工時, 
                        decimal 內部工資, 
                        decimal 外包工資, 
                        decimal 外包工時, 
                        decimal 已生產數量, 
                        decimal _完成_, 
                        decimal 生產效率, 
                        decimal 尚需工時, 
                        int 年份, 
                        int 月份) {
                UnfinishedWorksheetReportSourceRow rowUnfinishedWorksheetReportSourceRow = ((UnfinishedWorksheetReportSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        產線,
                        單據日期,
                        預計完成日,
                        工作單號,
                        序號,
                        品號,
                        品名,
                        數量,
                        單位,
                        標準工時,
                        單位人工成本,
                        總標準工時,
                        內部工時,
                        內部工資,
                        外包工資,
                        外包工時,
                        已生產數量,
                        _完成_,
                        生產效率,
                        尚需工時,
                        年份,
                        月份};
                rowUnfinishedWorksheetReportSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnfinishedWorksheetReportSourceRow);
                return rowUnfinishedWorksheetReportSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRow AddUnfinishedWorksheetReportSourceRow(
                        string 產線, 
                        System.DateTime 單據日期, 
                        System.DateTime 預計完成日, 
                        string 工作單號, 
                        int 序號, 
                        string 品號, 
                        string 品名, 
                        decimal 數量, 
                        string 單位, 
                        decimal 標準工時, 
                        decimal 單位人工成本, 
                        decimal 總標準工時, 
                        decimal 內部工時, 
                        decimal 內部工資, 
                        decimal 外包工資, 
                        decimal 外包工時, 
                        decimal 已生產數量, 
                        decimal 尚需工時, 
                        int 年份, 
                        int 月份) {
                UnfinishedWorksheetReportSourceRow rowUnfinishedWorksheetReportSourceRow = ((UnfinishedWorksheetReportSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        產線,
                        單據日期,
                        預計完成日,
                        工作單號,
                        序號,
                        品號,
                        品名,
                        數量,
                        單位,
                        標準工時,
                        單位人工成本,
                        總標準工時,
                        內部工時,
                        內部工資,
                        外包工資,
                        外包工時,
                        已生產數量,
                        null,
                        null,
                        尚需工時,
                        年份,
                        月份};
                rowUnfinishedWorksheetReportSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnfinishedWorksheetReportSourceRow);
                return rowUnfinishedWorksheetReportSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnfinishedWorksheetReportSourceDataTable cln = ((UnfinishedWorksheetReportSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnfinishedWorksheetReportSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column產線 = base.Columns["產線"];
                this.column單據日期 = base.Columns["單據日期"];
                this.column預計完成日 = base.Columns["預計完成日"];
                this.column工作單號 = base.Columns["工作單號"];
                this.column序號 = base.Columns["序號"];
                this.column品號 = base.Columns["品號"];
                this.column品名 = base.Columns["品名"];
                this.column數量 = base.Columns["數量"];
                this.column單位 = base.Columns["單位"];
                this.column標準工時 = base.Columns["標準工時"];
                this.column單位人工成本 = base.Columns["單位人工成本"];
                this.column總標準工時 = base.Columns["總標準工時"];
                this.column內部工時 = base.Columns["內部工時"];
                this.column內部工資 = base.Columns["內部工資"];
                this.column外包工資 = base.Columns["外包工資"];
                this.column外包工時 = base.Columns["外包工時"];
                this.column已生產數量 = base.Columns["已生產數量"];
                this._column完成_ = base.Columns["完成%"];
                this.column生產效率 = base.Columns["生產效率"];
                this.column尚需工時 = base.Columns["尚需工時"];
                this.column年份 = base.Columns["年份"];
                this.column月份 = base.Columns["月份"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column產線 = new global::System.Data.DataColumn("產線", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column產線);
                this.column單據日期 = new global::System.Data.DataColumn("單據日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單據日期);
                this.column預計完成日 = new global::System.Data.DataColumn("預計完成日", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column預計完成日);
                this.column工作單號 = new global::System.Data.DataColumn("工作單號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column工作單號);
                this.column序號 = new global::System.Data.DataColumn("序號", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序號);
                this.column品號 = new global::System.Data.DataColumn("品號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品號);
                this.column品名 = new global::System.Data.DataColumn("品名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品名);
                this.column數量 = new global::System.Data.DataColumn("數量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column數量);
                this.column單位 = new global::System.Data.DataColumn("單位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位);
                this.column標準工時 = new global::System.Data.DataColumn("標準工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準工時);
                this.column單位人工成本 = new global::System.Data.DataColumn("單位人工成本", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位人工成本);
                this.column總標準工時 = new global::System.Data.DataColumn("總標準工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column總標準工時);
                this.column內部工時 = new global::System.Data.DataColumn("內部工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column內部工時);
                this.column內部工資 = new global::System.Data.DataColumn("內部工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column內部工資);
                this.column外包工資 = new global::System.Data.DataColumn("外包工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column外包工資);
                this.column外包工時 = new global::System.Data.DataColumn("外包工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column外包工時);
                this.column已生產數量 = new global::System.Data.DataColumn("已生產數量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column已生產數量);
                this._column完成_ = new global::System.Data.DataColumn("完成%", typeof(decimal), null, global::System.Data.MappingType.Element);
                this._column完成_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column完成_");
                this._column完成_.ExtendedProperties.Add("Generator_UserColumnName", "完成%");
                base.Columns.Add(this._column完成_);
                this.column生產效率 = new global::System.Data.DataColumn("生產效率", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生產效率);
                this.column尚需工時 = new global::System.Data.DataColumn("尚需工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column尚需工時);
                this.column年份 = new global::System.Data.DataColumn("年份", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年份);
                this.column月份 = new global::System.Data.DataColumn("月份", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column月份);
                this.column產線.MaxLength = 255;
                this.column工作單號.MaxLength = 255;
                this.column品號.MaxLength = 255;
                this.column品名.MaxLength = 255;
                this.column單位.ReadOnly = true;
                this.column單位.DefaultValue = ((string)("KPCS"));
                this.column單位.MaxLength = 255;
                this.column外包工資.DefaultValue = ((decimal)(0m));
                this.column外包工時.DefaultValue = ((decimal)(0m));
                this._column完成_.ReadOnly = true;
                this._column完成_.DefaultValue = ((decimal)(0m));
                this.column生產效率.ReadOnly = true;
                this.column生產效率.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRow NewUnfinishedWorksheetReportSourceRow() {
                return ((UnfinishedWorksheetReportSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnfinishedWorksheetReportSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnfinishedWorksheetReportSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this._完成_Column.Expression = "IIF(數量 = 0,0,已生產數量/數量)";
                this.生產效率Column.Expression = "IIF((內部工時+外包工時) = 0 ,0,(總標準工時*[完成%])/(內部工時+外包工時))";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnfinishedWorksheetReportSourceRowChanged != null)) {
                    this.UnfinishedWorksheetReportSourceRowChanged(this, new UnfinishedWorksheetReportSourceRowChangeEvent(((UnfinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnfinishedWorksheetReportSourceRowChanging != null)) {
                    this.UnfinishedWorksheetReportSourceRowChanging(this, new UnfinishedWorksheetReportSourceRowChangeEvent(((UnfinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnfinishedWorksheetReportSourceRowDeleted != null)) {
                    this.UnfinishedWorksheetReportSourceRowDeleted(this, new UnfinishedWorksheetReportSourceRowChangeEvent(((UnfinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnfinishedWorksheetReportSourceRowDeleting != null)) {
                    this.UnfinishedWorksheetReportSourceRowDeleting(this, new UnfinishedWorksheetReportSourceRowChangeEvent(((UnfinishedWorksheetReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnfinishedWorksheetReportSourceRow(UnfinishedWorksheetReportSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportDataSet ds = new ReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnfinishedWorksheetReportSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitPriceReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column品號;
            
            private global::System.Data.DataColumn column品名;
            
            private global::System.Data.DataColumn column數量;
            
            private global::System.Data.DataColumn column單位;
            
            private global::System.Data.DataColumn column標準工時;
            
            private global::System.Data.DataColumn column標準單位工資;
            
            private global::System.Data.DataColumn _column實際工時_內_外_;
            
            private global::System.Data.DataColumn _column實際工資_內_外_;
            
            private global::System.Data.DataColumn _column實際單位工資_NT__Kpcs_;
            
            private global::System.Data.DataColumn column系統時薪;
            
            private global::System.Data.DataColumn column單位標準工資;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportDataTable(bool initExpressions) {
                this.TableName = "UnitPriceReport";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPriceReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitPriceReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品號Column {
                get {
                    return this.column品號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品名Column {
                get {
                    return this.column品名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 數量Column {
                get {
                    return this.column數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位Column {
                get {
                    return this.column單位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準工時Column {
                get {
                    return this.column標準工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 標準單位工資Column {
                get {
                    return this.column標準單位工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _實際工時_內_外_Column {
                get {
                    return this._column實際工時_內_外_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _實際工資_內_外_Column {
                get {
                    return this._column實際工資_內_外_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _實際單位工資_NT__Kpcs_Column {
                get {
                    return this._column實際單位工資_NT__Kpcs_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 系統時薪Column {
                get {
                    return this.column系統時薪;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 單位標準工資Column {
                get {
                    return this.column單位標準工資;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow this[int index] {
                get {
                    return ((UnitPriceReportRow)(this.Rows[index]));
                }
            }
            
            public event UnitPriceReportRowChangeEventHandler UnitPriceReportRowChanging;
            
            public event UnitPriceReportRowChangeEventHandler UnitPriceReportRowChanged;
            
            public event UnitPriceReportRowChangeEventHandler UnitPriceReportRowDeleting;
            
            public event UnitPriceReportRowChangeEventHandler UnitPriceReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitPriceReportRow(UnitPriceReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow AddUnitPriceReportRow(string 品號, string 品名, decimal 數量, string 單位, decimal 標準工時, decimal 標準單位工資, decimal _實際工時_內_外_, decimal _實際工資_內_外_, string _實際單位工資_NT__Kpcs_, decimal 系統時薪, decimal 單位標準工資) {
                UnitPriceReportRow rowUnitPriceReportRow = ((UnitPriceReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        品號,
                        品名,
                        數量,
                        單位,
                        標準工時,
                        標準單位工資,
                        _實際工時_內_外_,
                        _實際工資_內_外_,
                        _實際單位工資_NT__Kpcs_,
                        系統時薪,
                        單位標準工資};
                rowUnitPriceReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitPriceReportRow);
                return rowUnitPriceReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow AddUnitPriceReportRow(string 品號, string 品名, decimal 數量, string 單位, decimal 標準工時, decimal 標準單位工資, decimal _實際工時_內_外_, decimal _實際工資_內_外_, decimal 系統時薪, decimal 單位標準工資) {
                UnitPriceReportRow rowUnitPriceReportRow = ((UnitPriceReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        品號,
                        品名,
                        數量,
                        單位,
                        標準工時,
                        標準單位工資,
                        _實際工時_內_外_,
                        _實際工資_內_外_,
                        null,
                        系統時薪,
                        單位標準工資};
                rowUnitPriceReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitPriceReportRow);
                return rowUnitPriceReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow FindBy品號(string 品號) {
                return ((UnitPriceReportRow)(this.Rows.Find(new object[] {
                            品號})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitPriceReportDataTable cln = ((UnitPriceReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitPriceReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column品號 = base.Columns["品號"];
                this.column品名 = base.Columns["品名"];
                this.column數量 = base.Columns["數量"];
                this.column單位 = base.Columns["單位"];
                this.column標準工時 = base.Columns["標準工時"];
                this.column標準單位工資 = base.Columns["標準單位工資"];
                this._column實際工時_內_外_ = base.Columns["實際工時(內+外)"];
                this._column實際工資_內_外_ = base.Columns["實際工資(內+外)"];
                this._column實際單位工資_NT__Kpcs_ = base.Columns["實際單位工資(NT$/Kpcs)"];
                this.column系統時薪 = base.Columns["系統時薪"];
                this.column單位標準工資 = base.Columns["單位標準工資"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column品號 = new global::System.Data.DataColumn("品號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品號);
                this.column品名 = new global::System.Data.DataColumn("品名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品名);
                this.column數量 = new global::System.Data.DataColumn("數量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column數量);
                this.column單位 = new global::System.Data.DataColumn("單位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位);
                this.column標準工時 = new global::System.Data.DataColumn("標準工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準工時);
                this.column標準單位工資 = new global::System.Data.DataColumn("標準單位工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column標準單位工資);
                this._column實際工時_內_外_ = new global::System.Data.DataColumn("實際工時(內+外)", typeof(decimal), null, global::System.Data.MappingType.Element);
                this._column實際工時_內_外_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column實際工時_內_外_");
                this._column實際工時_內_外_.ExtendedProperties.Add("Generator_UserColumnName", "實際工時(內+外)");
                base.Columns.Add(this._column實際工時_內_外_);
                this._column實際工資_內_外_ = new global::System.Data.DataColumn("實際工資(內+外)", typeof(decimal), null, global::System.Data.MappingType.Element);
                this._column實際工資_內_外_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column實際工資_內_外_");
                this._column實際工資_內_外_.ExtendedProperties.Add("Generator_UserColumnName", "實際工資(內+外)");
                base.Columns.Add(this._column實際工資_內_外_);
                this._column實際單位工資_NT__Kpcs_ = new global::System.Data.DataColumn("實際單位工資(NT$/Kpcs)", typeof(string), null, global::System.Data.MappingType.Element);
                this._column實際單位工資_NT__Kpcs_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column實際單位工資_NT__Kpcs_");
                this._column實際單位工資_NT__Kpcs_.ExtendedProperties.Add("Generator_UserColumnName", "實際單位工資(NT$/Kpcs)");
                base.Columns.Add(this._column實際單位工資_NT__Kpcs_);
                this.column系統時薪 = new global::System.Data.DataColumn("系統時薪", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column系統時薪);
                this.column單位標準工資 = new global::System.Data.DataColumn("單位標準工資", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column單位標準工資);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column品號}, true));
                this.column品號.AllowDBNull = false;
                this.column品號.Unique = true;
                this.column品號.MaxLength = 255;
                this.column品名.MaxLength = 255;
                this.column單位.ReadOnly = true;
                this.column單位.DefaultValue = ((string)("KPCS"));
                this.column單位.MaxLength = 255;
                this._column實際工資_內_外_.DefaultValue = ((decimal)(0m));
                this._column實際單位工資_NT__Kpcs_.ReadOnly = true;
                this.column單位標準工資.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow NewUnitPriceReportRow() {
                return ((UnitPriceReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitPriceReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitPriceReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this._實際單位工資_NT__Kpcs_Column.Expression = "IIF(數量 IS NULL OR 數量 = 0,0,([實際工資(內+外)])/數量)";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitPriceReportRowChanged != null)) {
                    this.UnitPriceReportRowChanged(this, new UnitPriceReportRowChangeEvent(((UnitPriceReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitPriceReportRowChanging != null)) {
                    this.UnitPriceReportRowChanging(this, new UnitPriceReportRowChangeEvent(((UnitPriceReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitPriceReportRowDeleted != null)) {
                    this.UnitPriceReportRowDeleted(this, new UnitPriceReportRowChangeEvent(((UnitPriceReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitPriceReportRowDeleting != null)) {
                    this.UnitPriceReportRowDeleting(this, new UnitPriceReportRowChangeEvent(((UnitPriceReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitPriceReportRow(UnitPriceReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportDataSet ds = new ReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitPriceReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LineLaborHourReportSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column員工編號;
            
            private global::System.Data.DataColumn column日期;
            
            private global::System.Data.DataColumn column工作單號;
            
            private global::System.Data.DataColumn column品號;
            
            private global::System.Data.DataColumn column工時;
            
            private global::System.Data.DataColumn column非生產編號;
            
            private global::System.Data.DataColumn column備註;
            
            private global::System.Data.DataColumn column員工姓名;
            
            private global::System.Data.DataColumn column產線;
            
            private global::System.Data.DataColumn column借入產線;
            
            private global::System.Data.DataColumn column數量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceDataTable() {
                this.TableName = "LineLaborHourReportSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LineLaborHourReportSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LineLaborHourReportSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 員工編號Column {
                get {
                    return this.column員工編號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 工作單號Column {
                get {
                    return this.column工作單號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品號Column {
                get {
                    return this.column品號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 工時Column {
                get {
                    return this.column工時;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 非生產編號Column {
                get {
                    return this.column非生產編號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 備註Column {
                get {
                    return this.column備註;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 員工姓名Column {
                get {
                    return this.column員工姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 產線Column {
                get {
                    return this.column產線;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 借入產線Column {
                get {
                    return this.column借入產線;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 數量Column {
                get {
                    return this.column數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceRow this[int index] {
                get {
                    return ((LineLaborHourReportSourceRow)(this.Rows[index]));
                }
            }
            
            public event LineLaborHourReportSourceRowChangeEventHandler LineLaborHourReportSourceRowChanging;
            
            public event LineLaborHourReportSourceRowChangeEventHandler LineLaborHourReportSourceRowChanged;
            
            public event LineLaborHourReportSourceRowChangeEventHandler LineLaborHourReportSourceRowDeleting;
            
            public event LineLaborHourReportSourceRowChangeEventHandler LineLaborHourReportSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLineLaborHourReportSourceRow(LineLaborHourReportSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceRow AddLineLaborHourReportSourceRow(string 員工編號, System.DateTime 日期, string 工作單號, string 品號, decimal 工時, int 非生產編號, string 備註, string 員工姓名, string 產線, string 借入產線, int 數量) {
                LineLaborHourReportSourceRow rowLineLaborHourReportSourceRow = ((LineLaborHourReportSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        員工編號,
                        日期,
                        工作單號,
                        品號,
                        工時,
                        非生產編號,
                        備註,
                        員工姓名,
                        產線,
                        借入產線,
                        數量};
                rowLineLaborHourReportSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLineLaborHourReportSourceRow);
                return rowLineLaborHourReportSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LineLaborHourReportSourceDataTable cln = ((LineLaborHourReportSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LineLaborHourReportSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column員工編號 = base.Columns["員工編號"];
                this.column日期 = base.Columns["日期"];
                this.column工作單號 = base.Columns["工作單號"];
                this.column品號 = base.Columns["品號"];
                this.column工時 = base.Columns["工時"];
                this.column非生產編號 = base.Columns["非生產編號"];
                this.column備註 = base.Columns["備註"];
                this.column員工姓名 = base.Columns["員工姓名"];
                this.column產線 = base.Columns["產線"];
                this.column借入產線 = base.Columns["借入產線"];
                this.column數量 = base.Columns["數量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column員工編號 = new global::System.Data.DataColumn("員工編號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column員工編號);
                this.column日期 = new global::System.Data.DataColumn("日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期);
                this.column工作單號 = new global::System.Data.DataColumn("工作單號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column工作單號);
                this.column品號 = new global::System.Data.DataColumn("品號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品號);
                this.column工時 = new global::System.Data.DataColumn("工時", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column工時);
                this.column非生產編號 = new global::System.Data.DataColumn("非生產編號", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column非生產編號);
                this.column備註 = new global::System.Data.DataColumn("備註", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column備註);
                this.column員工姓名 = new global::System.Data.DataColumn("員工姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column員工姓名);
                this.column產線 = new global::System.Data.DataColumn("產線", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column產線);
                this.column借入產線 = new global::System.Data.DataColumn("借入產線", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column借入產線);
                this.column數量 = new global::System.Data.DataColumn("數量", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column數量);
                this.column員工編號.MaxLength = 255;
                this.column工作單號.MaxLength = 255;
                this.column品號.MaxLength = 255;
                this.column備註.MaxLength = 255;
                this.column員工姓名.MaxLength = 255;
                this.column產線.MaxLength = 255;
                this.column借入產線.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceRow NewLineLaborHourReportSourceRow() {
                return ((LineLaborHourReportSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LineLaborHourReportSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LineLaborHourReportSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LineLaborHourReportSourceRowChanged != null)) {
                    this.LineLaborHourReportSourceRowChanged(this, new LineLaborHourReportSourceRowChangeEvent(((LineLaborHourReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LineLaborHourReportSourceRowChanging != null)) {
                    this.LineLaborHourReportSourceRowChanging(this, new LineLaborHourReportSourceRowChangeEvent(((LineLaborHourReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LineLaborHourReportSourceRowDeleted != null)) {
                    this.LineLaborHourReportSourceRowDeleted(this, new LineLaborHourReportSourceRowChangeEvent(((LineLaborHourReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LineLaborHourReportSourceRowDeleting != null)) {
                    this.LineLaborHourReportSourceRowDeleting(this, new LineLaborHourReportSourceRowChangeEvent(((LineLaborHourReportSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLineLaborHourReportSourceRow(LineLaborHourReportSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportDataSet ds = new ReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LineLaborHourReportSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectListReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column檢驗日期;
            
            private global::System.Data.DataColumn column產線;
            
            private global::System.Data.DataColumn column品號;
            
            private global::System.Data.DataColumn columnQCN;
            
            private global::System.Data.DataColumn column檢驗數量;
            
            private global::System.Data.DataColumn column工作單號;
            
            private global::System.Data.DataColumn column送檢次數;
            
            private global::System.Data.DataColumn column檢驗狀態;
            
            private global::System.Data.DataColumn column品質履歷;
            
            private global::System.Data.DataColumn column客戶名稱;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportDataTable() {
                this.TableName = "InspectListReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectListReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectListReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 檢驗日期Column {
                get {
                    return this.column檢驗日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 產線Column {
                get {
                    return this.column產線;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品號Column {
                get {
                    return this.column品號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QCNColumn {
                get {
                    return this.columnQCN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 檢驗數量Column {
                get {
                    return this.column檢驗數量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 工作單號Column {
                get {
                    return this.column工作單號;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 送檢次數Column {
                get {
                    return this.column送檢次數;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 檢驗狀態Column {
                get {
                    return this.column檢驗狀態;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 品質履歷Column {
                get {
                    return this.column品質履歷;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 客戶名稱Column {
                get {
                    return this.column客戶名稱;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportRow this[int index] {
                get {
                    return ((InspectListReportRow)(this.Rows[index]));
                }
            }
            
            public event InspectListReportRowChangeEventHandler InspectListReportRowChanging;
            
            public event InspectListReportRowChangeEventHandler InspectListReportRowChanged;
            
            public event InspectListReportRowChangeEventHandler InspectListReportRowDeleting;
            
            public event InspectListReportRowChangeEventHandler InspectListReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectListReportRow(InspectListReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportRow AddInspectListReportRow(System.DateTime 檢驗日期, string 產線, string 品號, string QCN, decimal 檢驗數量, string 工作單號, int 送檢次數, string 檢驗狀態, string 品質履歷, string 客戶名稱, string Remark) {
                InspectListReportRow rowInspectListReportRow = ((InspectListReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        檢驗日期,
                        產線,
                        品號,
                        QCN,
                        檢驗數量,
                        工作單號,
                        送檢次數,
                        檢驗狀態,
                        品質履歷,
                        客戶名稱,
                        Remark};
                rowInspectListReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectListReportRow);
                return rowInspectListReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectListReportDataTable cln = ((InspectListReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectListReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column檢驗日期 = base.Columns["檢驗日期"];
                this.column產線 = base.Columns["產線"];
                this.column品號 = base.Columns["品號"];
                this.columnQCN = base.Columns["QCN"];
                this.column檢驗數量 = base.Columns["檢驗數量"];
                this.column工作單號 = base.Columns["工作單號"];
                this.column送檢次數 = base.Columns["送檢次數"];
                this.column檢驗狀態 = base.Columns["檢驗狀態"];
                this.column品質履歷 = base.Columns["品質履歷"];
                this.column客戶名稱 = base.Columns["客戶名稱"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column檢驗日期 = new global::System.Data.DataColumn("檢驗日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column檢驗日期);
                this.column產線 = new global::System.Data.DataColumn("產線", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column產線);
                this.column品號 = new global::System.Data.DataColumn("品號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品號);
                this.columnQCN = new global::System.Data.DataColumn("QCN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQCN);
                this.column檢驗數量 = new global::System.Data.DataColumn("檢驗數量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column檢驗數量);
                this.column工作單號 = new global::System.Data.DataColumn("工作單號", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column工作單號);
                this.column送檢次數 = new global::System.Data.DataColumn("送檢次數", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column送檢次數);
                this.column檢驗狀態 = new global::System.Data.DataColumn("檢驗狀態", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column檢驗狀態);
                this.column品質履歷 = new global::System.Data.DataColumn("品質履歷", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column品質履歷);
                this.column客戶名稱 = new global::System.Data.DataColumn("客戶名稱", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column客戶名稱);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportRow NewInspectListReportRow() {
                return ((InspectListReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectListReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectListReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectListReportRowChanged != null)) {
                    this.InspectListReportRowChanged(this, new InspectListReportRowChangeEvent(((InspectListReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectListReportRowChanging != null)) {
                    this.InspectListReportRowChanging(this, new InspectListReportRowChangeEvent(((InspectListReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectListReportRowDeleted != null)) {
                    this.InspectListReportRowDeleted(this, new InspectListReportRowChangeEvent(((InspectListReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectListReportRowDeleting != null)) {
                    this.InspectListReportRowDeleting(this, new InspectListReportRowChangeEvent(((InspectListReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectListReportRow(InspectListReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportDataSet ds = new ReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectListReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FinishedWorksheetReportSourceRow : global::System.Data.DataRow {
            
            private FinishedWorksheetReportSourceDataTable tableFinishedWorksheetReportSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinishedWorksheetReportSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFinishedWorksheetReportSource = ((FinishedWorksheetReportSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 產線 {
                get {
                    try {
                        return ((string)(this[this.tableFinishedWorksheetReportSource.產線Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'產線\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.產線Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 實際完成日 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFinishedWorksheetReportSource.實際完成日Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'實際完成日\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.實際完成日Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 工作單號 {
                get {
                    try {
                        return ((string)(this[this.tableFinishedWorksheetReportSource.工作單號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'工作單號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.工作單號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序號 {
                get {
                    try {
                        return ((int)(this[this.tableFinishedWorksheetReportSource.序號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'序號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.序號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品號 {
                get {
                    try {
                        return ((string)(this[this.tableFinishedWorksheetReportSource.品號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'品號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.品號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品名 {
                get {
                    try {
                        return ((string)(this[this.tableFinishedWorksheetReportSource.品名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'品名\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.品名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 數量 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 單位 {
                get {
                    try {
                        return ((string)(this[this.tableFinishedWorksheetReportSource.單位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'單位\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.單位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 內部工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.內部工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'內部工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.內部工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 內部工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.內部工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'內部工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.內部工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 外包工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.外包工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'外包工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.外包工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 外包工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.外包工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'外包工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.外包工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 實際總工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.實際總工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'實際總工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.實際總工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 實際總工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.實際總工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'實際總工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.實際總工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準總工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.標準總工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'標準總工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.標準總工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準總工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.標準總工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'標準總工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.標準總工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 生產效率 {
                get {
                    try {
                        return ((double)(this[this.tableFinishedWorksheetReportSource.生產效率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'生產效率\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.生產效率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.標準工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'標準工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.標準工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 單位人工成本 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.單位人工成本Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'單位人工成本\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.單位人工成本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 實際工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.實際工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'實際工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.實際工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 實際工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.實際工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'實際工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.實際工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short 年份 {
                get {
                    try {
                        return ((short)(this[this.tableFinishedWorksheetReportSource.年份Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'年份\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.年份Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short 月份 {
                get {
                    try {
                        return ((short)(this[this.tableFinishedWorksheetReportSource.月份Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'月份\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.月份Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFinishedWorksheetReportSource.日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'日期\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 單位標準工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableFinishedWorksheetReportSource.單位標準工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FinishedWorksheetReportSource\' 中資料行 \'單位標準工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFinishedWorksheetReportSource.單位標準工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is產線Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.產線Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set產線Null() {
                this[this.tableFinishedWorksheetReportSource.產線Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is實際完成日Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.實際完成日Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set實際完成日Null() {
                this[this.tableFinishedWorksheetReportSource.實際完成日Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is工作單號Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.工作單號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set工作單號Null() {
                this[this.tableFinishedWorksheetReportSource.工作單號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is序號Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.序號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set序號Null() {
                this[this.tableFinishedWorksheetReportSource.序號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品號Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.品號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品號Null() {
                this[this.tableFinishedWorksheetReportSource.品號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品名Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.品名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品名Null() {
                this[this.tableFinishedWorksheetReportSource.品名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is數量Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set數量Null() {
                this[this.tableFinishedWorksheetReportSource.數量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.單位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位Null() {
                this[this.tableFinishedWorksheetReportSource.單位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is內部工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.內部工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set內部工時Null() {
                this[this.tableFinishedWorksheetReportSource.內部工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is內部工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.內部工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set內部工資Null() {
                this[this.tableFinishedWorksheetReportSource.內部工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is外包工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.外包工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set外包工資Null() {
                this[this.tableFinishedWorksheetReportSource.外包工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is外包工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.外包工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set外包工時Null() {
                this[this.tableFinishedWorksheetReportSource.外包工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is實際總工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.實際總工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set實際總工時Null() {
                this[this.tableFinishedWorksheetReportSource.實際總工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is實際總工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.實際總工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set實際總工資Null() {
                this[this.tableFinishedWorksheetReportSource.實際總工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準總工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.標準總工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準總工時Null() {
                this[this.tableFinishedWorksheetReportSource.標準總工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準總工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.標準總工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準總工資Null() {
                this[this.tableFinishedWorksheetReportSource.標準總工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生產效率Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.生產效率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生產效率Null() {
                this[this.tableFinishedWorksheetReportSource.生產效率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.標準工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準工時Null() {
                this[this.tableFinishedWorksheetReportSource.標準工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位人工成本Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.單位人工成本Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位人工成本Null() {
                this[this.tableFinishedWorksheetReportSource.單位人工成本Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is實際工時Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.實際工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set實際工時Null() {
                this[this.tableFinishedWorksheetReportSource.實際工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is實際工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.實際工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set實際工資Null() {
                this[this.tableFinishedWorksheetReportSource.實際工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年份Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.年份Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年份Null() {
                this[this.tableFinishedWorksheetReportSource.年份Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is月份Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.月份Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set月份Null() {
                this[this.tableFinishedWorksheetReportSource.月份Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日期Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日期Null() {
                this[this.tableFinishedWorksheetReportSource.日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位標準工資Null() {
                return this.IsNull(this.tableFinishedWorksheetReportSource.單位標準工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位標準工資Null() {
                this[this.tableFinishedWorksheetReportSource.單位標準工資Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnfinishedWorksheetReportSourceRow : global::System.Data.DataRow {
            
            private UnfinishedWorksheetReportSourceDataTable tableUnfinishedWorksheetReportSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnfinishedWorksheetReportSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnfinishedWorksheetReportSource = ((UnfinishedWorksheetReportSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 產線 {
                get {
                    try {
                        return ((string)(this[this.tableUnfinishedWorksheetReportSource.產線Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'產線\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.產線Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 單據日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnfinishedWorksheetReportSource.單據日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'單據日期\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.單據日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 預計完成日 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnfinishedWorksheetReportSource.預計完成日Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'預計完成日\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.預計完成日Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 工作單號 {
                get {
                    try {
                        return ((string)(this[this.tableUnfinishedWorksheetReportSource.工作單號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'工作單號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.工作單號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序號 {
                get {
                    try {
                        return ((int)(this[this.tableUnfinishedWorksheetReportSource.序號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'序號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.序號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品號 {
                get {
                    try {
                        return ((string)(this[this.tableUnfinishedWorksheetReportSource.品號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'品號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.品號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品名 {
                get {
                    try {
                        return ((string)(this[this.tableUnfinishedWorksheetReportSource.品名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'品名\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.品名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 數量 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 單位 {
                get {
                    try {
                        return ((string)(this[this.tableUnfinishedWorksheetReportSource.單位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'單位\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.單位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.標準工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'標準工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.標準工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 單位人工成本 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.單位人工成本Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'單位人工成本\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.單位人工成本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 總標準工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.總標準工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'總標準工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.總標準工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 內部工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.內部工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'內部工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.內部工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 內部工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.內部工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'內部工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.內部工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 外包工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.外包工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'外包工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.外包工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 外包工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.外包工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'外包工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.外包工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 已生產數量 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.已生產數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'已生產數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.已生產數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal _完成_ {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource._完成_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'完成%\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource._完成_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 生產效率 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.生產效率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'生產效率\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.生產效率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 尚需工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnfinishedWorksheetReportSource.尚需工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'尚需工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.尚需工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 年份 {
                get {
                    try {
                        return ((int)(this[this.tableUnfinishedWorksheetReportSource.年份Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'年份\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.年份Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 月份 {
                get {
                    try {
                        return ((int)(this[this.tableUnfinishedWorksheetReportSource.月份Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnfinishedWorksheetReportSource\' 中資料行 \'月份\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnfinishedWorksheetReportSource.月份Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is產線Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.產線Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set產線Null() {
                this[this.tableUnfinishedWorksheetReportSource.產線Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單據日期Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.單據日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單據日期Null() {
                this[this.tableUnfinishedWorksheetReportSource.單據日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is預計完成日Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.預計完成日Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set預計完成日Null() {
                this[this.tableUnfinishedWorksheetReportSource.預計完成日Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is工作單號Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.工作單號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set工作單號Null() {
                this[this.tableUnfinishedWorksheetReportSource.工作單號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is序號Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.序號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set序號Null() {
                this[this.tableUnfinishedWorksheetReportSource.序號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品號Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.品號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品號Null() {
                this[this.tableUnfinishedWorksheetReportSource.品號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品名Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.品名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品名Null() {
                this[this.tableUnfinishedWorksheetReportSource.品名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is數量Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set數量Null() {
                this[this.tableUnfinishedWorksheetReportSource.數量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.單位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位Null() {
                this[this.tableUnfinishedWorksheetReportSource.單位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準工時Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.標準工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準工時Null() {
                this[this.tableUnfinishedWorksheetReportSource.標準工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位人工成本Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.單位人工成本Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位人工成本Null() {
                this[this.tableUnfinishedWorksheetReportSource.單位人工成本Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is總標準工時Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.總標準工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set總標準工時Null() {
                this[this.tableUnfinishedWorksheetReportSource.總標準工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is內部工時Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.內部工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set內部工時Null() {
                this[this.tableUnfinishedWorksheetReportSource.內部工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is內部工資Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.內部工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set內部工資Null() {
                this[this.tableUnfinishedWorksheetReportSource.內部工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is外包工資Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.外包工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set外包工資Null() {
                this[this.tableUnfinishedWorksheetReportSource.外包工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is外包工時Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.外包工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set外包工時Null() {
                this[this.tableUnfinishedWorksheetReportSource.外包工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is已生產數量Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.已生產數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set已生產數量Null() {
                this[this.tableUnfinishedWorksheetReportSource.已生產數量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_完成_Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource._完成_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_完成_Null() {
                this[this.tableUnfinishedWorksheetReportSource._完成_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生產效率Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.生產效率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生產效率Null() {
                this[this.tableUnfinishedWorksheetReportSource.生產效率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is尚需工時Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.尚需工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set尚需工時Null() {
                this[this.tableUnfinishedWorksheetReportSource.尚需工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年份Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.年份Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年份Null() {
                this[this.tableUnfinishedWorksheetReportSource.年份Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is月份Null() {
                return this.IsNull(this.tableUnfinishedWorksheetReportSource.月份Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set月份Null() {
                this[this.tableUnfinishedWorksheetReportSource.月份Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitPriceReportRow : global::System.Data.DataRow {
            
            private UnitPriceReportDataTable tableUnitPriceReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPriceReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitPriceReport = ((UnitPriceReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品號 {
                get {
                    return ((string)(this[this.tableUnitPriceReport.品號Column]));
                }
                set {
                    this[this.tableUnitPriceReport.品號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品名 {
                get {
                    try {
                        return ((string)(this[this.tableUnitPriceReport.品名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'品名\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.品名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 數量 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport.數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 單位 {
                get {
                    try {
                        return ((string)(this[this.tableUnitPriceReport.單位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'單位\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.單位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport.標準工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'標準工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.標準工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 標準單位工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport.標準單位工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'標準單位工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.標準單位工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal _實際工時_內_外_ {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport._實際工時_內_外_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'實際工時(內+外)\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport._實際工時_內_外_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal _實際工資_內_外_ {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport._實際工資_內_外_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'實際工資(內+外)\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport._實際工資_內_外_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _實際單位工資_NT__Kpcs_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitPriceReport._實際單位工資_NT__Kpcs_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'實際單位工資(NT$/Kpcs)\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport._實際單位工資_NT__Kpcs_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 系統時薪 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport.系統時薪Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'系統時薪\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.系統時薪Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 單位標準工資 {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitPriceReport.單位標準工資Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UnitPriceReport\' 中資料行 \'單位標準工資\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnitPriceReport.單位標準工資Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品名Null() {
                return this.IsNull(this.tableUnitPriceReport.品名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品名Null() {
                this[this.tableUnitPriceReport.品名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is數量Null() {
                return this.IsNull(this.tableUnitPriceReport.數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set數量Null() {
                this[this.tableUnitPriceReport.數量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位Null() {
                return this.IsNull(this.tableUnitPriceReport.單位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位Null() {
                this[this.tableUnitPriceReport.單位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準工時Null() {
                return this.IsNull(this.tableUnitPriceReport.標準工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準工時Null() {
                this[this.tableUnitPriceReport.標準工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is標準單位工資Null() {
                return this.IsNull(this.tableUnitPriceReport.標準單位工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set標準單位工資Null() {
                this[this.tableUnitPriceReport.標準單位工資Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_實際工時_內_外_Null() {
                return this.IsNull(this.tableUnitPriceReport._實際工時_內_外_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_實際工時_內_外_Null() {
                this[this.tableUnitPriceReport._實際工時_內_外_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_實際工資_內_外_Null() {
                return this.IsNull(this.tableUnitPriceReport._實際工資_內_外_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_實際工資_內_外_Null() {
                this[this.tableUnitPriceReport._實際工資_內_外_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_實際單位工資_NT__Kpcs_Null() {
                return this.IsNull(this.tableUnitPriceReport._實際單位工資_NT__Kpcs_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_實際單位工資_NT__Kpcs_Null() {
                this[this.tableUnitPriceReport._實際單位工資_NT__Kpcs_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is系統時薪Null() {
                return this.IsNull(this.tableUnitPriceReport.系統時薪Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set系統時薪Null() {
                this[this.tableUnitPriceReport.系統時薪Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is單位標準工資Null() {
                return this.IsNull(this.tableUnitPriceReport.單位標準工資Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set單位標準工資Null() {
                this[this.tableUnitPriceReport.單位標準工資Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LineLaborHourReportSourceRow : global::System.Data.DataRow {
            
            private LineLaborHourReportSourceDataTable tableLineLaborHourReportSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LineLaborHourReportSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLineLaborHourReportSource = ((LineLaborHourReportSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 員工編號 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.員工編號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'員工編號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.員工編號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLineLaborHourReportSource.日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'日期\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 工作單號 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.工作單號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'工作單號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.工作單號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品號 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.品號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'品號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.品號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 工時 {
                get {
                    try {
                        return ((decimal)(this[this.tableLineLaborHourReportSource.工時Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'工時\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.工時Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 非生產編號 {
                get {
                    try {
                        return ((int)(this[this.tableLineLaborHourReportSource.非生產編號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'非生產編號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.非生產編號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 備註 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.備註Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'備註\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.備註Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 員工姓名 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.員工姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'員工姓名\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.員工姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 產線 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.產線Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'產線\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.產線Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 借入產線 {
                get {
                    try {
                        return ((string)(this[this.tableLineLaborHourReportSource.借入產線Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'借入產線\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.借入產線Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 數量 {
                get {
                    try {
                        return ((int)(this[this.tableLineLaborHourReportSource.數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'LineLaborHourReportSource\' 中資料行 \'數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLineLaborHourReportSource.數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is員工編號Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.員工編號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set員工編號Null() {
                this[this.tableLineLaborHourReportSource.員工編號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日期Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日期Null() {
                this[this.tableLineLaborHourReportSource.日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is工作單號Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.工作單號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set工作單號Null() {
                this[this.tableLineLaborHourReportSource.工作單號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品號Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.品號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品號Null() {
                this[this.tableLineLaborHourReportSource.品號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is工時Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.工時Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set工時Null() {
                this[this.tableLineLaborHourReportSource.工時Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is非生產編號Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.非生產編號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set非生產編號Null() {
                this[this.tableLineLaborHourReportSource.非生產編號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is備註Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.備註Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set備註Null() {
                this[this.tableLineLaborHourReportSource.備註Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is員工姓名Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.員工姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set員工姓名Null() {
                this[this.tableLineLaborHourReportSource.員工姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is產線Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.產線Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set產線Null() {
                this[this.tableLineLaborHourReportSource.產線Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is借入產線Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.借入產線Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set借入產線Null() {
                this[this.tableLineLaborHourReportSource.借入產線Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is數量Null() {
                return this.IsNull(this.tableLineLaborHourReportSource.數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set數量Null() {
                this[this.tableLineLaborHourReportSource.數量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectListReportRow : global::System.Data.DataRow {
            
            private InspectListReportDataTable tableInspectListReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectListReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectListReport = ((InspectListReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 檢驗日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspectListReport.檢驗日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'檢驗日期\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.檢驗日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 產線 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.產線Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'產線\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.產線Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品號 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.品號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'品號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.品號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QCN {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.QCNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'QCN\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.QCNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 檢驗數量 {
                get {
                    try {
                        return ((decimal)(this[this.tableInspectListReport.檢驗數量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'檢驗數量\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.檢驗數量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 工作單號 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.工作單號Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'工作單號\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.工作單號Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 送檢次數 {
                get {
                    try {
                        return ((int)(this[this.tableInspectListReport.送檢次數Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'送檢次數\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.送檢次數Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 檢驗狀態 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.檢驗狀態Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'檢驗狀態\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.檢驗狀態Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 品質履歷 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.品質履歷Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'品質履歷\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.品質履歷Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 客戶名稱 {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.客戶名稱Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'客戶名稱\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.客戶名稱Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableInspectListReport.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'InspectListReport\' 中資料行 \'Remark\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableInspectListReport.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is檢驗日期Null() {
                return this.IsNull(this.tableInspectListReport.檢驗日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set檢驗日期Null() {
                this[this.tableInspectListReport.檢驗日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is產線Null() {
                return this.IsNull(this.tableInspectListReport.產線Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set產線Null() {
                this[this.tableInspectListReport.產線Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品號Null() {
                return this.IsNull(this.tableInspectListReport.品號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品號Null() {
                this[this.tableInspectListReport.品號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQCNNull() {
                return this.IsNull(this.tableInspectListReport.QCNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQCNNull() {
                this[this.tableInspectListReport.QCNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is檢驗數量Null() {
                return this.IsNull(this.tableInspectListReport.檢驗數量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set檢驗數量Null() {
                this[this.tableInspectListReport.檢驗數量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is工作單號Null() {
                return this.IsNull(this.tableInspectListReport.工作單號Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set工作單號Null() {
                this[this.tableInspectListReport.工作單號Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is送檢次數Null() {
                return this.IsNull(this.tableInspectListReport.送檢次數Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set送檢次數Null() {
                this[this.tableInspectListReport.送檢次數Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is檢驗狀態Null() {
                return this.IsNull(this.tableInspectListReport.檢驗狀態Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set檢驗狀態Null() {
                this[this.tableInspectListReport.檢驗狀態Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is品質履歷Null() {
                return this.IsNull(this.tableInspectListReport.品質履歷Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set品質履歷Null() {
                this[this.tableInspectListReport.品質履歷Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is客戶名稱Null() {
                return this.IsNull(this.tableInspectListReport.客戶名稱Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set客戶名稱Null() {
                this[this.tableInspectListReport.客戶名稱Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableInspectListReport.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableInspectListReport.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FinishedWorksheetReportSourceRowChangeEvent : global::System.EventArgs {
            
            private FinishedWorksheetReportSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRowChangeEvent(FinishedWorksheetReportSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinishedWorksheetReportSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnfinishedWorksheetReportSourceRowChangeEvent : global::System.EventArgs {
            
            private UnfinishedWorksheetReportSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRowChangeEvent(UnfinishedWorksheetReportSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnfinishedWorksheetReportSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitPriceReportRowChangeEvent : global::System.EventArgs {
            
            private UnitPriceReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRowChangeEvent(UnitPriceReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPriceReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LineLaborHourReportSourceRowChangeEvent : global::System.EventArgs {
            
            private LineLaborHourReportSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceRowChangeEvent(LineLaborHourReportSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineLaborHourReportSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectListReportRowChangeEvent : global::System.EventArgs {
            
            private InspectListReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportRowChangeEvent(InspectListReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Mong.ReportDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FinishedWorksheetReportSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FinishedWorksheetReportSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FinishedWorksheetReportSource";
            tableMapping.ColumnMappings.Add("產線", "產線");
            tableMapping.ColumnMappings.Add("實際完成日", "實際完成日");
            tableMapping.ColumnMappings.Add("工作單號", "工作單號");
            tableMapping.ColumnMappings.Add("品號", "品號");
            tableMapping.ColumnMappings.Add("品名", "品名");
            tableMapping.ColumnMappings.Add("數量", "數量");
            tableMapping.ColumnMappings.Add("標準工時", "標準工時");
            tableMapping.ColumnMappings.Add("外包工資", "外包工資");
            tableMapping.ColumnMappings.Add("外包工時", "外包工時");
            tableMapping.ColumnMappings.Add("單位標準工資", "單位人工成本");
            tableMapping.ColumnMappings.Add("年份", "年份");
            tableMapping.ColumnMappings.Add("月份", "月份");
            tableMapping.ColumnMappings.Add("日期", "日期");
            tableMapping.ColumnMappings.Add("內部工時", "內部工時");
            tableMapping.ColumnMappings.Add("內部工資", "內部工資");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::Mong.Properties.Settings.Default.dbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT         C.產線, B.實際完成日, A.單號 AS 工作單號, C.品號, Year(D.日期) AS 年份, 
                          Month(D.日期) AS 月份, D.日期, C.品名, B.數量 / 1000 AS 數量, 
                          C.工時 AS 標準工時, C.單位標準工資, IIF(SUM(D.工時) IS NULL, 0, 
                          SUM(D.工時)) AS 內部工時, IIF(內部工時 = 0, 0, SUM(E.薪水 * D.工時)) 
                          AS 內部工資,B.編號 as 工品編號
FROM             ((((工作單 AS A INNER JOIN
                          工作單品號 AS B ON A.單號 = B.單號) INNER JOIN
                          產品品號 AS C ON C.品號 = B.品號) LEFT JOIN
                          工時 AS D ON D.工作單號 = B.單號 AND D.工品編號 = B.編號) LEFT JOIN
                          員工 AS E ON E.編號 = D.員工編號)
WHERE         (B.實際完成日 >= ?) AND (B.實際完成日 <= ?)
GROUP BY  A.單號, B.實際完成日, B.數量, C.品號, C.品名, C.工時, C.單位標準工資, C.產線, 
                          Year(D.日期), Month(D.日期), D.日期,B.編號
ORDER BY  C.產線, B.實際完成日, A.單號, C.品號";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("開始日期", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "實際完成日", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("結束日期", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "實際完成日", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportDataSet.FinishedWorksheetReportSourceDataTable dataTable, global::System.Nullable<global::System.DateTime> 開始日期, global::System.Nullable<global::System.DateTime> 結束日期) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((開始日期.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(開始日期.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((結束日期.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(結束日期.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportDataSet.FinishedWorksheetReportSourceDataTable GetData(global::System.Nullable<global::System.DateTime> 開始日期, global::System.Nullable<global::System.DateTime> 結束日期) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((開始日期.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(開始日期.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((結束日期.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(結束日期.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ReportDataSet.FinishedWorksheetReportSourceDataTable dataTable = new ReportDataSet.FinishedWorksheetReportSourceDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UnfinishedWorksheetReportSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnfinishedWorksheetReportSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UnfinishedWorksheetReportSource";
            tableMapping.ColumnMappings.Add("產線", "產線");
            tableMapping.ColumnMappings.Add("單據日期", "單據日期");
            tableMapping.ColumnMappings.Add("工作單號", "工作單號");
            tableMapping.ColumnMappings.Add("品號", "品號");
            tableMapping.ColumnMappings.Add("品名", "品名");
            tableMapping.ColumnMappings.Add("數量", "數量");
            tableMapping.ColumnMappings.Add("單位", "單位");
            tableMapping.ColumnMappings.Add("標準工時", "標準工時");
            tableMapping.ColumnMappings.Add("總標準工時", "總標準工時");
            tableMapping.ColumnMappings.Add("內部工時", "內部工時");
            tableMapping.ColumnMappings.Add("內部工資", "內部工資");
            tableMapping.ColumnMappings.Add("已生產數量", "已生產數量");
            tableMapping.ColumnMappings.Add("年份", "年份");
            tableMapping.ColumnMappings.Add("月份", "月份");
            tableMapping.ColumnMappings.Add("單位標準工資", "單位人工成本");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::Mong.Properties.Settings.Default.dbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"
                      SELECT   P.產線,
                      W.單據日期,
                      WP.預計完成日,
                      W.單號 as 工作單號,
                      P.品號,
                      Year(H.日期) as 年份,
                      Month(H.日期) as 月份 ,
                      P.品名,
                      WP.數量 / 1000 as 數量,
                      P.工時 as 標準工時,P.單位標準工資,
                      (P.工時 * 數量) as 總標準工時,
                      IIF(SUM(H.工時) is NULL, 0, SUM(H.工時)) as 內部工時,
                      IIF(內部工時 = 0 , 0, SUM(L.薪水 * H.工時)) as 內部工資,
                      IIF(SUM(H.數量) is NULL, 0, SUM(H.數量))/1000 as 已生產數量,WP.編號 AS 工品編號

                      FROM          ((((工作單 as W INNER JOIN 工作單品號 as WP ON W.單號 = WP.單號)
                      INNER JOIN 產品品號 as P ON P.品號 = WP.品號)
                      LEFT JOIN 工時 as H ON H.工作單號 =  WP.單號 AND H.工品編號 = WP.編號)
                      LEFT JOIN 員工 as L ON L.編號 = H.員工編號)
                      WHERE         (WP.實際完成日 IS NULL) AND 
                      (
                      ((WP.預計完成日 >= ?)  AND (WP.預計完成日 <= ?)) OR
                        (? = TRUE)
                      )
                      GROUP BY  W.單號,W.單據日期,WP.預計完成日, P.品號, WP.數量, P.品名, P.工時,P.單位標準工資,P.產線,Year(H.日期), Month(H.日期),WP.編號
                      ORDER BY P.產線,WP.預計完成日, W.單號, P.品號";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("開始日期", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "預計完成日", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("結束日期", global::System.Data.OleDb.OleDbType.DBDate, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "預計完成日", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("輸出全部", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), null, global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportDataSet.UnfinishedWorksheetReportSourceDataTable dataTable, System.DateTime 開始日期, System.DateTime 結束日期, bool 輸出全部) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(開始日期));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(結束日期));
            this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(輸出全部));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportDataSet.UnfinishedWorksheetReportSourceDataTable GetData(System.DateTime 開始日期, System.DateTime 結束日期, bool 輸出全部) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(開始日期));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(結束日期));
            this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(輸出全部));
            ReportDataSet.UnfinishedWorksheetReportSourceDataTable dataTable = new ReportDataSet.UnfinishedWorksheetReportSourceDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UnitPriceReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitPriceReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UnitPriceReport";
            tableMapping.ColumnMappings.Add("品號", "品號");
            tableMapping.ColumnMappings.Add("品名", "品名");
            tableMapping.ColumnMappings.Add("數量", "數量");
            tableMapping.ColumnMappings.Add("單位", "單位");
            tableMapping.ColumnMappings.Add("標準工時", "標準工時");
            tableMapping.ColumnMappings.Add("標準單位工資", "標準單位工資");
            tableMapping.ColumnMappings.Add("系統時薪", "系統時薪");
            tableMapping.ColumnMappings.Add("單位標準工資", "單位標準工資");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::Mong.Properties.Settings.Default.dbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT         產品品號.品號, 產品品號.品名, SUM(工作單品號.數量) / 1000 AS 數量, 
                          'KPCS' AS 單位, 產品品號.工時 * SUM(工作單品號.數量) / 1000 AS 標準工時, 
                          產品品號.工時 * SUM(工作單品號.數量) 
                          / 1000 * 產品品號.單位標準工資 AS 標準單位工資, 產品品號.單位標準工資 AS 系統時薪, 標準工資 as 單位標準工資
FROM             ((工作單 INNER JOIN
                          工作單品號 ON 工作單品號.單號 = 工作單.單號) INNER JOIN
                          產品品號 ON 工作單品號.品號 = 產品品號.品號)
WHERE         (工作單.實際完成日 >= ?) AND (工作單.實際完成日 <= ?)
GROUP BY  產品品號.品號, 產品品號.品名, 產品品號.工時, 產品品號.產線, 
                          產品品號.標準工資, 產品品號.單位標準工資
ORDER BY  產品品號.品號";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("實際完成日", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "實際完成日", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("實際完成日1", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "實際完成日", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportDataSet.UnitPriceReportDataTable dataTable, global::System.Nullable<global::System.DateTime> 實際完成日, global::System.Nullable<global::System.DateTime> 實際完成日1) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((實際完成日.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(實際完成日.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((實際完成日1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(實際完成日1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportDataSet.UnitPriceReportDataTable GetData(global::System.Nullable<global::System.DateTime> 實際完成日, global::System.Nullable<global::System.DateTime> 實際完成日1) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((實際完成日.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(實際完成日.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((實際完成日1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(實際完成日1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ReportDataSet.UnitPriceReportDataTable dataTable = new ReportDataSet.UnitPriceReportDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LineLaborHourReportSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LineLaborHourReportSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LineLaborHourReportSource";
            tableMapping.ColumnMappings.Add("員工編號", "員工編號");
            tableMapping.ColumnMappings.Add("日期", "日期");
            tableMapping.ColumnMappings.Add("工作單號", "工作單號");
            tableMapping.ColumnMappings.Add("工時", "工時");
            tableMapping.ColumnMappings.Add("非生產編號", "非生產編號");
            tableMapping.ColumnMappings.Add("備註", "備註");
            tableMapping.ColumnMappings.Add("員工姓名", "員工姓名");
            tableMapping.ColumnMappings.Add("產線", "產線");
            tableMapping.ColumnMappings.Add("借入產線", "借入產線");
            tableMapping.ColumnMappings.Add("數量", "數量");
            tableMapping.ColumnMappings.Add("品號", "品號");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::Mong.Properties.Settings.Default.dbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT         工時.借入產線, 工時.員工編號, 工時.日期, 工時.工作單號, 品號, 工時.工時,
                           工時.數量, 工時.非生產編號, 工時.備註, 員工.姓名 AS 員工姓名, 
                          員工.產線
FROM             ((工時 INNER JOIN 員工 ON 工時.員工編號 = 員工.編號)
                          LEFT JOIN 工作單品號 ON 工時.工作單號 = 工作單品號.單號 AND 工時.工品編號 = 工作單品號.編號)
WHERE         (工時.日期 >= ?) AND (工時.日期 <= ?)
ORDER BY  員工.產線, 員工.姓名, 工時.日期";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("日期", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "日期", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("日期1", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "日期", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportDataSet.LineLaborHourReportSourceDataTable dataTable, System.DateTime 日期, System.DateTime 日期1) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(日期));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(日期1));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportDataSet.LineLaborHourReportSourceDataTable GetData(System.DateTime 日期, System.DateTime 日期1) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(日期));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(日期1));
            ReportDataSet.LineLaborHourReportSourceDataTable dataTable = new ReportDataSet.LineLaborHourReportSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591